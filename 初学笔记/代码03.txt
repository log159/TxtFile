//函数对象（仿函数）

#include<iostream>
using namespace std;
#include<string>
class Print
{
public:
	Print()
	{
		num = 0;
	}
	void operator()(string test)
	{
		cout << test << endl; num++;
	}
	int num;
};
void doPrint(Print p, string test)
{
	cout << "-------" << endl;
	p(test);
}
int main()
{
	//函数对象（仿函数）
	//1、当函数用
	//2、有自己的状态，比如记录调用次数
	//3、作为参数传递（本质是类对象）
	Print p;
	p("Hello");
	p("Hello");
	p("Hello");
	p("Hello");
	cout << "当前函数调用了：" << p.num << "次" << endl;
	doPrint(p, "Hello");//作为参数传递
	system("pause");
	return 0;
}

//谓词

#include<iostream>
using namespace std;
#include<string>
#include<vector>
#include<algorithm>
class Greater
{
public:
	bool operator()(int v1, int v2)//二元谓词
	{
		return v1 > v2;
	}
};
class GreaterFind
{
public:
	bool operator()(int v1)//一元谓词
	{
		return v1 > 5;
	}
};
int main()
{
	vector<int>v;
	v.push_back(1);
	v.push_back(2);
	v.push_back(3);
	v.push_back(4);
	v.push_back(5);
	v.push_back(6);
	sort(v.begin(), v.end(), Greater());
	for (vector<int>::iterator it = v.begin(); it != v.end(); it++)
	{
		cout << *it << endl;
	}
	vector<int>::iterator it=find_if(v.begin(), v.end(), GreaterFind());
	if (it != v.end())
	{
		cout << "找到大于5的元素：" << *it << endl;
	}
	system("pause");
	return 0;
}

//内建函数对象-算数仿函数

#include<iostream>
using namespace std;
#include<functional>
int main()
{
	negate<int>n;//一元仿函数 取反仿函数
	cout << n(50) << endl;
	plus<int>p;//二元仿函数 相加仿函数
	cout << p(10, 20) << endl;
	system("pause");
	return 0;
}

//内建函数对象-关系仿函数

#include<iostream>
using namespace std;
#include<functional>
#include<vector>
#include<algorithm>
void Print(vector<int>&v)
{
	for (vector<int>::iterator it = v.begin(); it != v.end(); it++)
	{
		cout << *it << " ";
	}
	cout << endl;
};
class myCompare
{
public://关系仿函数
	bool operator()(int v1, int v2)
	{
		return v1 > v2;
	}
};
int main()
{
	vector<int>v;
	v.push_back(10);
	v.push_back(50);
	v.push_back(30);
	v.push_back(20);
	v.push_back(40);
	sort(v.begin(), v.end());//从小到大
	Print(v);
	sort(v.begin(), v.end(), greater<int>());//从大到小
	sort(v.begin(), v.end(), myCompare());//从大到小
	Print(v);
	system("pause");
	return 0;
}

//内建函数对象-逻辑仿函数

#include<iostream>
using namespace std;
#include<functional>
#include<vector>
#include<algorithm>
void Print(vector<bool>&v)
{
	for (vector<bool>::iterator it = v.begin(); it != v.end(); it++)
	{
		cout << *it << " ";
	}
	cout << endl;
};
int main()
{
	vector<bool>v;
	v.push_back(1);
	v.push_back(0);
	v.push_back(1);
	v.push_back(0);
	v.push_back(1);
	Print(v);
	vector<bool>v2;
	v2.resize(v.size());//开辟空间
	transform(v.begin(), v.end(), v2.begin(), logical_not<bool>());//取反搬运
	Print(v2);
	system("pause");
	return 0;
}

//常用遍历算法for_each

#include<iostream>
using namespace std;
#include<functional>
#include<vector>
#include<algorithm>
void Print01(int v1)
{
	cout << v1 << " ";
}
class Print02
{
public:
	void operator()(int v1)
	{
		cout << v1 << " ";
	}
};
int main()
{
	vector<int>v;
	v.push_back(10);
	v.push_back(50);
	v.push_back(30);
	v.push_back(20);
	v.push_back(40);
	for_each(v.begin(), v.end(), Print01);//普通函数传入函数名
	cout << endl;
	for_each(v.begin(), v.end(), Print02());//仿函数传入函数对象
	cout << endl;
	system("pause");
	return 0;
}

//常用遍历算法transform

#include<iostream>
using namespace std;
#include<functional>
#include<vector>
#include<algorithm>
class Print
{
public:
	void operator()(int v1)
	{
		cout << v1 << " ";
	}
};
class Add
{
public://对每个元素加一
	int operator()(int a)
	{
		return a + 1;
	}
};
int main()
{
	vector<int>v;
	v.push_back(10);
	v.push_back(50);
	v.push_back(30);
	v.push_back(20);
	v.push_back(40);
	transform(v.begin(), v.end(), v.begin(), Add());//加一后放回原来容器
	for_each(v.begin(), v.end(), Print());//仿函数传入函数对象
	cout << endl;
	system("pause");
	return 0;
}

//常用遍历算法-find

#include<iostream>
using namespace std;
#include<functional>
#include<vector>
#include<algorithm>
#include<string>
class Print
{
public:
	void operator()(int v1)
	{
		cout << v1 << " ";
	}
};
class Person
{
public:
	Person(string name,int age)
	{
		this->m_Name = name;
		this->m_Age = age;
	}
	bool operator==(const Person & p)//必须是const
	{
		if (this->m_Name == p.m_Name && this->m_Age == p.m_Age)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	string m_Name;
	int m_Age;
};
int main()
{
	vector<int>v;
	v.push_back(10);
	v.push_back(50);
	v.push_back(30);
	v.push_back(20);
	v.push_back(40);
	vector<int>::iterator it=find(v.begin(), v.end(), 50);
	if (it != v.end())
	{
		cout << "找到：" << *it << endl;
	}
	else
	{
		cout << "没找到" << endl;
	}
	Person p1("aaa", 10);
	Person p2("bbb", 20);
	Person p3("ccc", 30);
	Person p4("ddd", 40);
	Person p5("eee", 50);
	vector<Person>v2;
	v2.push_back(p1);
	v2.push_back(p2);
	v2.push_back(p3);
	v2.push_back(p4);
	v2.push_back(p5);
	vector<Person>::iterator it2 = find(v2.begin(), v2.end(), p2);
	if (it2 != v2.end())
	{
		cout << "找到：" << (*it2).m_Name<<" 年龄："<<(*it2).m_Age << endl;
	}
	else
	{
		cout << "没找到" << endl;
	}
	cout << endl;
	system("pause");
	return 0;
}

//常用查找算法-find_if

#include<iostream>
using namespace std;
#include<functional>
#include<vector>
#include<algorithm>
#include<string>
class Person
{
public:
	Person(string name,int age)
	{
		this->m_Name = name;
		this->m_Age = age;
	}
	string m_Name;
	int m_Age;
};
class Greater
{
public:
	bool operator()(int v1)
	{
		return v1 > 40;
	}
};
class Greater30
{
public:
	bool operator()(const Person & v)
	{
		return v.m_Age > 30;
	}
};
int main()
{
	vector<int>v;
	v.push_back(10);
	v.push_back(50);
	v.push_back(30);
	v.push_back(20);
	v.push_back(40);
	vector<int>::iterator it = find_if(v.begin(), v.end(), Greater());
	if (it != v.end())
	{
		cout << "找到了：" << *it << endl;
	}
	else
	{
		cout << "没找到" << endl;
	}
	vector<Person>v2;
	v2.push_back(Person("aaa", 20));
	v2.push_back(Person("bbb", 30));
	v2.push_back(Person("ccc", 40));
	vector<Person>::iterator it2 = find_if(v2.begin(), v2.end(), Greater30());
	if (it2 != v2.end())
	{
		cout << "找到：" << (*it2).m_Name << " " << (*it2).m_Age << endl;
	}
	else
	{
		cout << "未找到" << endl;
	}
	cout << endl;
	system("pause");
	return 0;
}

//常用查找算法-adjacent_find

#include<iostream>
using namespace std;
#include<vector>
#include<algorithm>
int main()
{
	vector<int>v;
	v.push_back(10);
	v.push_back(50);
	v.push_back(30);
	v.push_back(20);
	v.push_back(40);
	v.push_back(40);
	vector<int>::iterator it = adjacent_find(v.begin(), v.end());
	cout << *it << endl;
	system("pause");
	return 0;
}

//常用查找算法-binary_search

#include<iostream>
using namespace std;
#include<vector>
#include<algorithm>
int main()
{
	vector<int>v;
	for (int i = 0; i < 10; i++)
	{
		v.push_back(i);
	}
	//v.push_back(2);//只能是有序序列才行
	bool it = binary_search(v.begin(), v.end(),9);
	if (it == true)
	{
		cout << "找到了" << endl;
	}
	else
	{
		cout << "没找到" << endl;
	}
	system("pause");
	return 0;
}

//常用查找算法-count

#include<iostream>
using namespace std;
#include<vector>
#include<algorithm>
int main()
{
	vector<int>v;
	for (int i = 0; i < 10; i++)
	{
		v.push_back(i);
	}
	v.push_back(9);
	int it = count(v.begin(), v.end(),9);
	cout << it << endl;
	system("pause");
	return 0;
}

//常用查找算法-count_if

#include<iostream>
using namespace std;
#include<vector>
#include<algorithm>
class Greater
{
public:
	bool operator()(int a)
	{
		return a > 5;
	}
};
int main()
{
	vector<int>v;
	for (int i = 0; i < 10; i++)
	{
		v.push_back(i);
	}
	int it = count_if(v.begin(), v.end(),Greater());
	cout << it << endl;
	system("pause");
	return 0;
}

//常用排序算法-sort

#include<iostream>
using namespace std;
#include<vector>
#include<algorithm>
#include<functional>
void print(int a)
{
	cout << a << " ";
}
int main()
{
	vector<int>v;
	for (int i = 0; i < 10; i++)
	{
		v.push_back(i);
	}
	sort(v.begin(), v.end(),greater<int>());//降序
	for_each(v.begin(), v.end(), print); cout << endl;
	random_shuffle(v.begin(), v.end());//随机打乱
	for_each(v.begin(), v.end(), print); cout << endl;
        reverse(v.begin(), v.end());//反转范围内元素
	for_each(v.begin(), v.end(), print); cout << endl;
	system("pause");
	return 0;
}

//常用排序算法-random_shuffle

#include<iostream>
using namespace std;
#include<vector>
#include<algorithm>
#include<functional>
#include<ctime>
void print(int a)
{
	cout << a << " ";
}
int main()
{
	vector<int>v;
	for (int i = 0; i < 10; i++)
	{
		v.push_back(i);
	}
	srand((unsigned int)time(NULL));
	random_shuffle(v.begin(), v.end());//随机打乱
	for_each(v.begin(), v.end(), print); cout << endl;
	system("pause");
	return 0;
}

//常用排序算法-merge

#include<iostream>
using namespace std;
#include<vector>
#include<algorithm>
void print(int a)
{
	cout << a << " ";
}
int main()
{
	vector<int>v;
	vector<int>v2;

	for (int i = 0; i < 10; i++)
	{
		v.push_back(i);
		v2.push_back(i+1);

	}
	vector<int>v3;
	v3.resize(v.size()+v2.size());
	merge(v.begin(), v.end(), v2.begin(), v2.end(), v3.begin());
	for_each(v3.begin(), v3.end(), print); cout << endl;
	system("pause");
	return 0;
}

//常用排序算法-reverse

#include<iostream>
using namespace std;
#include<vector>
#include<algorithm>
void print(int a)
{
	cout << a << " ";
}
int main()
{
	vector<int>v;
	for (int i = 0; i < 10; i++)
		v.push_back(i);
	for_each(v.begin(), v.end(), print); cout << endl;
	reverse(v.begin(),v.end());
	for_each(v.begin(), v.end(), print); cout << endl;
	system("pause");
	return 0;
}

//常用拷贝和替换算法-copy

#include<iostream>
using namespace std;
#include<vector>
#include<algorithm>
void print(int a)
{
	cout << a << " ";
}
int main()
{
	vector<int>v1;
	for (int i = 0; i < 10; i++)
	{
		v1.push_back(i);
	}
	cout << "v1："; for_each(v1.begin(), v1.end(), print); cout << endl;
	vector<int>v2;
	v2 = v1;//拷贝01
	cout << "v2："; for_each(v2.begin(), v2.end(), print); cout << endl;
	vector<int>v3;
	v3.resize(v2.size());
	copy(v2.begin(), v2.end(), v3.begin());//拷贝02
	cout << "v3："; for_each(v3.begin(), v3.end(), print); cout << endl;
	system("pause");
	return 0;
}

//常用拷贝和替换算法-replace

#include<iostream>
using namespace std;
#include<vector>
#include<algorithm>
void print(int a)
{
	cout << a << " ";
}
int main()
{
	vector<int>v;
	v.push_back(1);
	v.push_back(2);
	v.push_back(1);
	v.push_back(2);
	v.push_back(1);
	replace(v.begin(), v.end(), 2, 1);//替换
	for_each(v.begin(), v.end(), print); cout << endl;
	system("pause");
	return 0;
}

//常用拷贝和替换算法-replace_if

#include<iostream>
using namespace std;
#include<vector>
#include<algorithm>
void print(int a)
{
	cout << a << " ";
}
class findPlace
{
public:
	bool operator()(int a)
	{
		return a > 1;
	}
};
int main()
{
	vector<int>v;
	v.push_back(1);
	v.push_back(2);
	v.push_back(4);
	v.push_back(2);
	v.push_back(1);
	v.push_back(3);
	replace_if(v.begin(), v.end(), findPlace(), 4);//条件替换
	for_each(v.begin(), v.end(), print); cout << endl;
	system("pause");
	return 0;
}

//常用拷贝和替换算法-swap

#include<iostream>
using namespace std;
#include<vector>
#include<algorithm>
void print(int a)
{
	cout << a << " ";
}
int main()
{
	vector<int>v;
	v.push_back(1);
	v.push_back(2);
	v.push_back(1);
	vector<int>v2;
	v2.push_back(10);
	v2.push_back(20);
	v2.push_back(10);
	for_each(v.begin(), v.end(), print); cout << endl;
	for_each(v2.begin(), v2.end(), print); cout << endl;
	swap(v, v2);//容器互换（同种类型）
	for_each(v.begin(), v.end(), print); cout << endl;
	for_each(v2.begin(), v2.end(), print); cout << endl;
	system("pause");
	return 0;
}

//常用算数生成算法-accumulate

#include<iostream>
using namespace std;
#include<vector>
#include<numeric>
int main()
{
	vector<int>v;
	v.push_back(1);
	v.push_back(2);
	v.push_back(1);
	int a=accumulate(v.begin(), v.end(), 0);//0是累加初始值
	cout << a << endl;
	system("pause");
	return 0;
}

//常用算数生成算法-fill

#include<iostream>
using namespace std;
#include<vector>
#include<numeric>
#include<algorithm>
void print(int val)
{
	cout << val << " ";
}
int main()
{
	vector<int>v;
	v.resize(3);
	fill(v.begin(), v.end(), 9);
	for_each(v.begin(), v.end(), print); cout << endl;
	system("pause");
	return 0;
}

//常用集合算法-set_intersection

#include<iostream>
using namespace std;
#include<vector>
#include<algorithm>
void print(int val)
{
	cout << val << " ";
}
int main()
{
	//必须为有序序列
	//min函数扩展空间
	//遍历目标容器不用v.end()
	vector<int>v1,v2,v3;
	for (int i = 0; i < 10; i++)
	{
		v1.push_back(i);
		v2.push_back(i + 5);
	}
	v3.resize(min(v1.size(), v2.size()));
	vector<int>::iterator it = set_intersection(v1.begin(), v1.end(), v2.begin(), v2.end(), v3.begin());
	for_each(v3.begin(), it, print); cout << endl;
	system("pause");
	return 0;
}

//常用集合算法-set_union

#include<iostream>
using namespace std;
#include<vector>
#include<algorithm>
void print(int val)
{
	cout << val << " ";
}
int main()
{
	//必须为有序序列
	//size相加扩展空间
	//遍历目标容器不用v.end()
	vector<int>v1,v2,v3;
	for (int i = 0; i < 10; i++)
	{
		v1.push_back(i);
		v2.push_back(i + 5);
	}
	v3.resize(v1.size() + v2.size());
	vector<int>::iterator it = set_union(v1.begin(), v1.end(), v2.begin(), v2.end(), v3.begin());
	for_each(v3.begin(), it, print); cout << endl;
	system("pause");
	return 0;
}

//常用集合算法-set_difference

#include<iostream>
using namespace std;
#include<vector>
#include<algorithm>
void print(int val)
{
	cout << val << " ";
}
int main()
{
	//必须为有序序列
	//max扩展空间
	//遍历目标容器不用v.end()
	vector<int>v1,v2,v3;
	for (int i = 0; i < 10; i++)
	{
		v1.push_back(i);
		v2.push_back(i + 5);
	}
	v3.resize(max(v1.size(),v2.size()));
	vector<int>::iterator it = set_difference(v1.begin(), v1.end(), v2.begin(), v2.end(), v3.begin());
	for_each(v3.begin(), it, print); cout << endl;
	it = set_difference(v2.begin(), v2.end(), v1.begin(), v1.end(), v3.begin());
	for_each(v3.begin(), it, print); cout << endl;
	system("pause");
	return 0;
}